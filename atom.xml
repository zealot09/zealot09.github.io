<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zealot09's Blog]]></title>
  <link href="http://zealot09.github.io/atom.xml" rel="self"/>
  <link href="http://zealot09.github.io/"/>
  <updated>2017-07-17T18:55:58+08:00</updated>
  <id>http://zealot09.github.io/</id>
  <author>
    <name><![CDATA[zealot09]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[react router complicated params no using query]]></title>
    <link href="http://zealot09.github.io/blog/2017/07/16/react-router-complicated-params/"/>
    <updated>2017-07-16T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2017/07/16/react-router-complicated-params</id>
    <content type="html"><![CDATA[<h2>react router complicated params</h2>

<p>We always facing a problem when building SPA apps with react &amp; react router between diff route paths ——
list page and detail pages need to share some data:</p>

<p>we can just solve  it with url params just in path, query, or search just like below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// path params</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;querylist/:taskId&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">QueryList</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and we can get the params like this</span>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">taskId</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">params</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// query &amp; search params</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span> <span class="nx">pathname</span><span class="o">:</span> <span class="s1">&#39;/crawler/group/duplicate/&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">id</span><span class="p">},</span> <span class="nx">query</span><span class="o">:</span> <span class="p">{</span> <span class="nx">taskId</span><span class="o">:</span> <span class="mi">12345</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span><span class="o">&gt;</span><span class="nx">duplicate</span> <span class="nx">list</span><span class="o">&lt;</span><span class="err">/Link&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span> <span class="nx">pathname</span><span class="o">:</span> <span class="s1">&#39;/crawler/group/duplicate/&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">id</span><span class="p">},</span> <span class="nx">search</span><span class="o">:</span> <span class="nx">querystring</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="nx">taskId</span><span class="o">:</span> <span class="mi">12345</span> <span class="p">})</span> <span class="p">}</span> <span class="p">}</span><span class="o">&gt;</span><span class="nx">duplicate</span> <span class="nx">list</span><span class="o">&lt;</span><span class="err">/Link&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">query</span><span class="p">,</span> <span class="nx">search</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">location</span>
</span></code></pre></td></tr></table></div></figure>


<p>but the disadvantage is obviously:</p>

<blockquote><p>1.the url is just ugly</p>

<p>2.we should concern about the character set in url, it may exist the reality that browser not support
such params in url</p></blockquote>

<h2>solutions</h2>

<h3>redux solution</h3>

<p>actually we just want a centralized state manage solution, and we can just solve it with redux.
But actually I don&rsquo;t like solution like this, if I suggest solution like this, there&rsquo;s no this post.</p>

<p>2 reasons below:</p>

<blockquote><p>1.redux can be cumbersome with some app state like fetching data, submiting data</p>

<p>2.there&rsquo;s much template code(repeat code) using redux</p></blockquote>

<p>so I quit redux</p>

<h3>location state</h3>

<p>actually react-router location support custom state passing with paths, we can just handle like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">pathname</span><span class="o">:</span> <span class="s1">&#39;/crawler/normalize/&#39;</span> <span class="o">+</span> <span class="nx">taskId</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">state</span><span class="o">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({</span> <span class="nx">taskName</span><span class="o">:</span> <span class="s1">&#39;123&#39;</span> <span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and can access</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">state</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just little tricks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redux react boilerplate]]></title>
    <link href="http://zealot09.github.io/blog/2016/02/18/react-redux/"/>
    <updated>2016-02-18T15:02:52+08:00</updated>
    <id>http://zealot09.github.io/blog/2016/02/18/react-redux</id>
    <content type="html"><![CDATA[<p>Long time no articles.
Last one year working on html5 apps, hybrid apps, using backbone. Faced some problems with backbone, I thought more about frontend.
several problems below with backbone</p>

<h3>1. backbone model is weak and error-prone in complex projects</h3>

<p>when model is listened in many views like the <code>accountModel</code>, you can&rsquo;t imagine what things will happen， it&rsquo;s terrible.</p>

<h3>2. missing data binding</h3>

<p>this leads to every change should update view manual, it&rsquo;s too disgusting.</p>

<h3>3. hard to test</h3>

<p>backbone&rsquo;s event driven makes developer manipulate DOMs themselves，It&rsquo;s hard to test.</p>

<h3>4. code reuse</h3>

<p>code can&rsquo;t reuse effictively because of manipulating DOMs</p>

<p>Compared to react and the idea of flux, a new frontend technology stack comes.
React is an awesome MVC View framework, and the flux programming idea is also greatly decoupling business which the above first problem can be solved.</p>

<p>Here is a redux and react demo - <a href="https://github.com/zealot09/LianExchange">LianExchange</a></p>

<h2>1. redux provide store with react</h2>

<p>react router using history, the entry just bind redux store and react router, using history to enable router, using Provider to bind store with react</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-router&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createHistory</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;history&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./containers/App&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Buy</span> <span class="nx">from</span> <span class="s1">&#39;./containers/Buy&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">configure</span> <span class="nx">from</span> <span class="s1">&#39;./store&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">configure</span><span class="p">()</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">createHistory</span><span class="p">()</span>
</span><span class='line'><span class="nx">syncReduxAndRouter</span><span class="p">(</span><span class="nx">history</span><span class="p">,</span> <span class="nx">store</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//if you just want route with hash, just</span>
</span><span class='line'><span class="c1">//&lt;Router location=&quot;hash&quot;&gt;&lt;/Router&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Router</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">App</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/Route&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/buy&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Buy</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/Route&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/Router&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Provider&gt;,</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see how to generate redux store below and bind with react.</p>

<h2>2. redux apply http request middleware and create store</h2>

<p>Redux <code>createStore</code> can only  handle synchronize action like the todo app, we using <a href="http://redux.js.org/docs/advanced/Middleware.html">redux middleware</a> to handle async action like ajax or some what.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kr">import</span> <span class="p">{</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">compose</span><span class="p">,</span> <span class="nx">applyMiddleware</span><span class="p">,</span> <span class="nx">combineReducers</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'>  <span class="kr">import</span> <span class="nx">rootReducer</span> <span class="nx">from</span> <span class="s1">&#39;../reducers&#39;</span>
</span><span class='line'>  <span class="kr">import</span> <span class="nx">apiMiddleware</span> <span class="nx">from</span> <span class="s1">&#39;../middlewares/apiMiddleware&#39;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">create</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devToolsExtension</span>
</span><span class='line'>    <span class="o">?</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devToolsExtension</span><span class="p">()(</span><span class="nx">createStore</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span> <span class="nx">createStore</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">finalCreateStore</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">apiMiddleware</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)(</span><span class="nx">create</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// const store = create(rootReducer, initialState)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">finalCreateStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>here we create redux store, and bind to react, then how can we bind the redux state and action to react, look below, using <a href="http://redux.js.org/docs/api/bindActionCreators.html">redux connect and bindActionCreators</a></p>

<h2>3. bind redux state and actions with react this.props</h2>

<p>container/Buy/index.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">PropTypes</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">bindActionCreators</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">connect</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-redux&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">Coins</span> <span class="nx">from</span> <span class="s1">&#39;../../actions/coins&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">style</span> <span class="nx">from</span> <span class="s1">&#39;./style.css&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;../../components/Header&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Footer</span> <span class="nx">from</span> <span class="s1">&#39;../../components/Footer&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Buy</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">actions</span><span class="p">,</span> <span class="nx">children</span><span class="p">,</span> <span class="nx">storage</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Header</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Footer</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapStateToProps</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">storage</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">coins</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">mapDispatchToProps</span><span class="p">(</span><span class="nx">dispatch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">actions</span><span class="o">:</span> <span class="nx">bindActionCreators</span><span class="p">(</span><span class="nx">Coins</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">mapStateToProps</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapDispatchToProps</span>
</span><span class='line'><span class="p">)(</span><span class="nx">Buy</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>we can bind redux state the react components or just html5 pages- <code>mapStateToProps</code>, developers can dispatch actions or reading data from <code>this.props</code>, and the parent props can pass sub data using <code>this.props</code></p>

<h2>4. simple reducers describe state change process</h2>

<p>reducers/account.jsx</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">ActionTypes</span> <span class="nx">from</span> <span class="s1">&#39;../constants/ActionTypes&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initState</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">accountReady</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">accountError</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">account</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">account</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">accountReady</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD_SUCCESS</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">account</span><span class="o">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">accountReady</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">accountError</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD_ERROR</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">account</span><span class="o">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">accountReady</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">accountError</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. sync actions and async actions</h2>

<p>actions/account.jsx</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">ActionTypes</span> <span class="nx">from</span> <span class="s1">&#39;../constants/ActionTypes&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">requestBase</span><span class="p">,</span> <span class="nx">baseAPI</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../app/configs&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">loadAccount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">types</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD_SUCCESS</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD_ERROR</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">requestSettings</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">requestBase</span><span class="p">.</span><span class="nx">lianCoinUrl</span> <span class="o">+</span> <span class="nx">baseAPI</span><span class="p">.</span><span class="nx">me</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">requestParams</span><span class="o">:</span> <span class="p">{</span><span class="nx">Includes</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;Accounts&#39;</span><span class="p">,</span><span class="s1">&#39;Profile&#39;</span><span class="p">,</span><span class="s1">&#39;BankCards&#39;</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reducers only describe the data transfer process which how state A transfers to state B, and then the react components re-renders the view.
Sync actions just like so, then reducers can change the state immediately</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">filterAccount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_FILTER</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>async actions should supply request url, method, params and so on</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">loadAccount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">types</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD_SUCCESS</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCOUNT_LOAD_ERROR</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">requestSettings</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">requestBase</span><span class="p">.</span><span class="nx">lianCoinUrl</span> <span class="o">+</span> <span class="nx">baseAPI</span><span class="p">.</span><span class="nx">me</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">requestParams</span><span class="o">:</span> <span class="p">{</span><span class="nx">Includes</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;Accounts&#39;</span><span class="p">,</span><span class="s1">&#39;Profile&#39;</span><span class="p">,</span><span class="s1">&#39;BankCards&#39;</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>6. redux http middleware</h2>

<p>async actions generally has there types <code>[load, success, error]</code> correspond to the actions in <code>middlewares/apiMiddleware.js</code>  <code>const [PENDING, FULFILLED, REJECTED] = action.types</code>,
the the middleware do request using <code>superagent</code> or some other http request library you like,  the callback can dispatch actions afterwards, the next is just redux <code>dispatch</code>, above in the <code>containers/Buy/index.js</code> we bind <code>dispatch</code> to the async action creator <code>bindActionCreators(Coins, dispatch)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="k">case</span> <span class="s1">&#39;GET&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">superagent</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span> <span class="nx">querystring</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">end</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">err</span> <span class="o">||</span> <span class="o">!</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">next</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">type</span><span class="o">:</span> <span class="nx">REJECTED</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">params</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">next</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">type</span><span class="o">:</span> <span class="nx">FULFILLED</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">params</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">data</span><span class="o">:</span> <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>then reducers still accept actions and change the state, and afterwards react re-render views.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[factorial division]]></title>
    <link href="http://zealot09.github.io/blog/2015/05/02/factorial-division/"/>
    <updated>2015-05-02T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2015/05/02/factorial-division</id>
    <content type="html"><![CDATA[<h1>1. factorial problem</h1>

<p>When playing on <a href="http://www.codewars.com/">code war</a>, meeting a problem which is called factorial division. Calculating the result of <code>n!/d!</code> <code>(n&gt;d)</code>.
It&rsquo;s easy, here is my solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">factorialDivision</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">*=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another solution using Recursive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">factorialDivision</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">n</span><span class="o">==</span><span class="nx">d</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">factorialDivision</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[login with password remembered]]></title>
    <link href="http://zealot09.github.io/blog/2015/04/02/login-with-password-remembered/"/>
    <updated>2015-04-02T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2015/04/02/login-with-password-remembered</id>
    <content type="html"><![CDATA[<h1>login with password remembered</h1>

<p>With password remembered, the password must be encrypted in some way and stored in the cookie, actually there&rsquo;s 3 cookies in header when user browser request for certification.
<code>$.cookie('cn')</code>- username
<code>$.cookie('ct')</code>- time stamp last login
<code>$.cookie('ctoken')</code>- encrypted password or some other info required to be certificated by server</p>

<p>Then we know <code>ctoken</code> is important, there&rsquo;s problem- how to ensure the password is not cracked by hackers, below is a way to do some calculation like or with two strings.</p>

<p>Think about this: if we just simply encrypt the password with MD5, sha1&hellip; and store in browser, is that safe? Maybe, but the most keys are cracked with md5, or sha1&hellip;, so we should encrypt it with some more complicate way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#username&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#password&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">sk</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;cn&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">,</span> <span class="p">{</span> <span class="nx">expires</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="p">});</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;ck&#39;</span><span class="p">,</span> <span class="nx">sk</span><span class="p">,</span> <span class="p">{</span> <span class="nx">expires</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="p">});</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">phash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">MD5</span><span class="p">(</span><span class="nx">pass</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">cthash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">MD5</span><span class="p">(</span><span class="nx">user</span> <span class="o">+</span> <span class="nx">sk</span> <span class="o">+</span> <span class="nx">phash</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">xorString</span><span class="p">(</span><span class="nx">phash</span><span class="p">,</span> <span class="nx">cthash</span><span class="p">);</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;token&#39;</span><span class="p">,</span> <span class="nx">token</span><span class="p">,</span> <span class="p">{</span> <span class="nx">expires</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="p">});</span>
</span><span class='line'> <span class="c1">//then request the server for validation</span>
</span></code></pre></td></tr></table></div></figure>


<p>what&rsquo;s <code>xorString</code>, it creates a token for server validation. The <code>xorString</code> gets two params - <code>phash</code> which is the password encrypted in MD5, another is <code>cthash</code> which is the <code>username + timestamp + MD5(password)</code> encrypted in MD5. We can see the <code>xorString</code> is handling the two strings in a special way. What will it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>        <span class="kd">var</span> <span class="nx">hex</span> <span class="o">=</span> <span class="s2">&quot;0123456789abcdef&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">xorString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">rs</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">rs</span> <span class="o">+=</span> <span class="nx">hex</span><span class="p">[</span><span class="nx">hex</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">^</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">key</span><span class="p">[</span><span class="nx">i</span><span class="p">])];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">rs</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> It&rsquo;s easy, just a or operation with each MD5 result,  it&rsquo;s an MD5 result again, but not the result of password. And although others know the token is some or result. It&rsquo;s nearly impossible for them to crack it.</p>

<p>Of course, we can calculate the right token easily in the server side. Here&rsquo;s a version of C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C#'><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">StringXor</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">key</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="kt">byte</span><span class="p">)(</span><span class="n">Convert</span><span class="p">.</span><span class="n">ToByte</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">),</span> <span class="m">16</span><span class="p">)</span> <span class="p">^</span> <span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BitConverter</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">).</span><span class="n">ToLower</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="kt">bool</span> <span class="nf">auth</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">string</span> <span class="n">cn</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">string</span> <span class="n">ct</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">string</span> <span class="n">password</span> <span class="p">=</span> <span class="s">&quot;&quot;</span> <span class="c1">//select from the db</span>
</span><span class='line'>      <span class="kt">byte</span><span class="p">[]</span> <span class="n">cctoken</span><span class="p">;</span>
</span><span class='line'>                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">md5</span> <span class="p">=</span> <span class="n">MD5</span><span class="p">.</span><span class="n">Create</span><span class="p">())</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">cctoken</span> <span class="p">=</span> <span class="n">md5</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">cn</span> <span class="p">+</span> <span class="n">ct</span> <span class="p">+</span> <span class="n">password</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">token</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">StringXor</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">cctoken</span><span class="p">))</span> <span class="p">?</span> <span class="k">true</span> <span class="p">:</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can store the  &lsquo;password&rsquo; safely in the browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node crawler]]></title>
    <link href="http://zealot09.github.io/blog/2015/03/13/node-crawler/"/>
    <updated>2015-03-13T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2015/03/13/node-crawler</id>
    <content type="html"><![CDATA[<h1>1. Node crawler</h1>

<p>It&rsquo;s been a long time when my last blog. This time I&rsquo;m going to start an open source project called <a href="https://github.com/zealot09/node-crawler.git">node-crawler</a>. Let&rsquo;s get straight to the point, the project includes three parts:</p>

<h2>1.1 Admin Dashboard</h2>

<p>It&rsquo;s a distribute crawling service, the admin can check the crawler status, manage the crawling data, control the crawler client, manage the client config and deliver the client to different servers through the platform. Or some functions like data analyze or data statics. (This backend mainly developed with angularJs ).</p>

<h2>1.2 Backend Service</h2>

<p>Nodejs backend service which is responsible for collecting the uploaded data. Mainly include some functions like filter the data, analyze the crawling result and store into the database.</p>

<h2>1.3 Crawler Client</h2>

<p>The client is responsible for crawling the pages, execute scripts, control spider amount,. Think that the backend service send some configs, the client read it and do the crawling job the server send it.</p>

<p>Actually the client should be smart to avoid preventing by the crawling target server, It should have a lot of strategies like changing the ip, changing the agent, limit the spider speed..and so on.</p>

<p>The server send message to check the client and start the client, send config like to start the client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">clientConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">speed</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="c1">//100/s to access the target website</span>
</span><span class='line'>  <span class="nx">workers</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="c1">//send 10 workers together crawling the website</span>
</span><span class='line'>  <span class="c1">//some other configs</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the client start to crawling work as the config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">crawlerConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">target</span><span class="o">:</span> <span class="s2">&quot;http://www.taobao.com/p/xxxxx&quot;</span><span class="p">,</span> <span class="c1">//taget crawling website</span>
</span><span class='line'>  <span class="nx">element</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="c1">//target element</span>
</span><span class='line'>  <span class="nx">attr</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="c1">//the real data to grab</span>
</span><span class='line'>  <span class="c1">//some other configs about the target web page</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This blog is just an introduction of the crawling system. Other blogs will introduce how to implement it! Welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 闭包]]></title>
    <link href="http://zealot09.github.io/blog/2014/10/29/javascript-bi-bao/"/>
    <updated>2014-10-29T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2014/10/29/javascript-bi-bao</id>
    <content type="html"><![CDATA[<h1>Javascript闭包</h1>

<p>说到javascript的闭包，就要先说一下传统语言的一些特征，如C，Java，C#等等，<code>void Test() {int i = 0;}</code> ，当Test方法调用结束时，执行栈弹出，局部变量被回收，而js的闭包，则是提供了一种在test这个执行域(函数)消亡时，仍能够访问i的方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">greeting</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span> <span class="c1">// local variable  </span>
</span><span class='line'><span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span> <span class="p">}</span> <span class="c1">// 每次调用时，产生闭包，并返回内部函数对象给调用者  </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sayHello</span><span class="o">=</span><span class="nx">greeting</span><span class="p">(</span><span class="s2">&quot;Closure&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sayHello</span><span class="p">()</span> <span class="c1">// 通过闭包访问到了局部变量text  </span>
</span></code></pre></td></tr></table></div></figure>


<h2>1.闭包原理</h2>

<p>闭包的原理涉及到ECMAScript语言的一些特征，下面进行详述</p>

<h3>1.1 Execution Context</h3>

<blockquote><p>控制权转移到一段可执行代码时候，就会产生一个Execution Context(简称EC)。</p></blockquote>

<p>一段可执行代码在ECMAScript里的定义可视为一个function（eval暂不提，strict mode也将其排除在外）,即函数调用的时候，就会通过压栈的方式将一个个function的ECStack压入栈中，该function return的时候就从栈中pop出来，用个简单的例子来形容:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">})(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 压栈情况，globalContext视环境而定，如果是浏览器，就是window</span>
</span><span class='line'><span class="nx">ECStack</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">foo</span><span class="o">&gt;</span> <span class="nx">functionContext</span>
</span><span class='line'>  <span class="nx">globalContext</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'><span class="c1">// 压入递归方法foo</span>
</span><span class='line'><span class="nx">ECStack</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">foo</span><span class="o">&gt;</span> <span class="nx">functionContext</span> <span class="err">–</span> <span class="nx">recursively</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">foo</span><span class="o">&gt;</span> <span class="nx">functionContext</span>
</span><span class='line'>  <span class="nx">globalContext</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'><span class="c1">//再弹出至只剩globalContext</span>
</span><span class='line'><span class="nx">ECStack</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">globalContext</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而每个context又是由什么组成的呢,
<code>context = {
    VO = {}, //variable object，函数调用时的内部变量的集合，包括arguments，内部方法等.
    this ,  //不赘述了，简而言之就是caller(</code>a.b()<code>的a)，当然new是另一情况了
    scope chain = [] //见下文，用于变量查找
}</code>
附上 <a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/">VO</a>,
<a href="http://dmitrysoshnikov.com/ecmascript/chapter-3-this/">this</a>,
闭包的产生主要是Scope Chain原因，但是强烈推荐以上几篇文章，对于理解ECMAScript的机制有很大帮助，能让人顿悟很多东西。</p>

<h3>1.2 Scope</h3>

<blockquote><p>Scope上下文，即是在执行语句时候能够访问到的所有变量的集合，Javascript是允许inner function存在的，因而其Scope就是一个链表形式的存在，其最顶端就是window(浏览器环境)，然后每定义一个function，就定义一个Scope Object，保存一个outer reference，以访问上一级变量集合，形成一个层级式的链，处于最底部的function会一层一层向上找变量，这也是为什么不要使用<code>t = 'without var is global var'</code>，会大大降低执行效率。附上<a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/">ECMA-262</a></p></blockquote>

<p>而每个Scope保存的out reference是由function定义时决定的，而不是调用执行时决定的，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="kd">var</span> <span class="nx">right</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">alert</span><span class="p">(</span><span class="nx">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">right</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nx">s</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">o</span><span class="p">();</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>alert结果是5而非4，如果把最上级的right定义注释掉，则right is not defined。所以这个时候是不是能理解闭包的原理了，虽然greeting方法已经消亡，但是返回的匿名函数的Scope保存有其上一级的outer reference，也就是text变量等的集合。</p>

<p>下一篇文章会介绍一下使用闭包的场景和相应的危害，欢迎拍砖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://zealot09.github.io/blog/2014/10/15/hello/"/>
    <updated>2014-10-15T15:02:52+08:00</updated>
    <id>http://zealot09.github.io/blog/2014/10/15/hello</id>
    <content type="html"><![CDATA[<h1>Welcome to my blog!</h1>

<p>It&rsquo;s been a long time since my last wordpress blog dropped down. Thanks the <strong>terrible</strong> US VPS I&#8217;v been always using, it just dropped down before I transferred my important backups.</p>

<p>Put it aside, I didn&rsquo;t want to write blogs for a long time since the accident. It&rsquo;s popular setting a blog using github pages &amp; jekyll because of github&rsquo;s free static pages hosting service and powerful</p>

<p>CDN service. So just a new try!</p>
]]></content>
  </entry>
  
</feed>

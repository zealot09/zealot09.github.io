<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Zealot09's Blog]]></title>
  <link href="http://zealot09.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://zealot09.github.io/"/>
  <updated>2017-07-16T21:46:57+08:00</updated>
  <id>http://zealot09.github.io/</id>
  <author>
    <name><![CDATA[zealot09]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[factorial division]]></title>
    <link href="http://zealot09.github.io/blog/2015/05/02/factorial-division/"/>
    <updated>2015-05-02T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2015/05/02/factorial-division</id>
    <content type="html"><![CDATA[<h1>1. factorial problem</h1>

<p>When playing on <a href="http://www.codewars.com/">code war</a>, meeting a problem which is called factorial division. Calculating the result of <code>n!/d!</code> <code>(n&gt;d)</code>.
It&rsquo;s easy, here is my solution:
<code>javascript
    function factorialDivision() {
        var result = 1;
        for(var i=n; i&gt;d;i--) {
            result *= i;
        }
        return result;
    }
</code></p>

<p>Here is another solution using Recursive:
<code>javascript
function factorialDivision(n, d) {
  return n==d &amp;&amp; 1 || n * factorialDivision(n-1,d)
}
</code>
Excellent!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[login with password remembered]]></title>
    <link href="http://zealot09.github.io/blog/2015/04/02/login-with-password-remembered/"/>
    <updated>2015-04-02T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2015/04/02/login-with-password-remembered</id>
    <content type="html"><![CDATA[<h1>login with password remembered</h1>

<p>With password remembered, the password must be encrypted in some way and stored in the cookie, actually there&rsquo;s 3 cookies in header when user browser request for certification.
<code>$.cookie('cn')</code>- username
<code>$.cookie('ct')</code>- time stamp last login
<code>$.cookie('ctoken')</code>- encrypted password or some other info required to be certificated by server</p>

<p>Then we know <code>ctoken</code> is important, there&rsquo;s problem- how to ensure the password is not cracked by hackers, below is a way to do some calculation like or with two strings.</p>

<p>Think about this: if we just simply encrypt the password with MD5, sha1&hellip; and store in browser, is that safe? Maybe, but the most keys are cracked with md5, or sha1&hellip;, so we should encrypt it with some more complicate way:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">#</span><span class="nx">username</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">#</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">sk</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">cn</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">user</span><span class="p">,</span> <span class="p">{</span> <span class="nx">expires</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/&amp;rsquo; });</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ck</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">sk</span><span class="p">,</span> <span class="p">{</span> <span class="nx">expires</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/&amp;rsquo; });</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">phash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">MD5</span><span class="p">(</span><span class="nx">pass</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">cthash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">MD5</span><span class="p">(</span><span class="nx">user</span> <span class="o">+</span> <span class="nx">sk</span> <span class="o">+</span> <span class="nx">phash</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">xorString</span><span class="p">(</span><span class="nx">phash</span><span class="p">,</span> <span class="nx">cthash</span><span class="p">);</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">token</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">token</span><span class="p">,</span> <span class="p">{</span> <span class="nx">expires</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/&amp;rsquo; });</span>
</span><span class='line'> <span class="c1">//then request the server for validation</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">what</span><span class="err">&#39;</span><span class="nx">s</span> <span class="err">`</span><span class="nx">xorString</span><span class="err">`</span><span class="p">,</span> <span class="nx">it</span> <span class="nx">creates</span> <span class="nx">a</span> <span class="nx">token</span> <span class="k">for</span> <span class="nx">server</span> <span class="nx">validation</span><span class="p">.</span> <span class="nx">The</span> <span class="err">`</span><span class="nx">xorString</span><span class="err">`</span> <span class="nx">gets</span> <span class="nx">two</span> <span class="nx">params</span> <span class="o">-</span> <span class="err">`</span><span class="nx">phash</span><span class="err">`</span> <span class="nx">which</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">password</span> <span class="nx">encrypted</span> <span class="k">in</span> <span class="nx">MD5</span><span class="p">,</span> <span class="nx">another</span> <span class="nx">is</span> <span class="err">`</span><span class="nx">cthash</span><span class="err">`</span> <span class="nx">which</span> <span class="nx">is</span> <span class="nx">the</span> <span class="err">`</span><span class="nx">username</span> <span class="o">+</span> <span class="nx">timestamp</span> <span class="o">+</span> <span class="nx">MD5</span><span class="p">(</span><span class="nx">password</span><span class="p">)</span><span class="err">`</span> <span class="nx">encrypted</span> <span class="k">in</span> <span class="nx">MD5</span><span class="p">.</span> <span class="nx">We</span> <span class="nx">can</span> <span class="nx">see</span> <span class="nx">the</span> <span class="err">`</span><span class="nx">xorString</span><span class="err">`</span> <span class="nx">is</span> <span class="nx">handling</span> <span class="nx">the</span> <span class="nx">two</span> <span class="nx">strings</span> <span class="k">in</span> <span class="nx">a</span> <span class="nx">special</span> <span class="nx">way</span><span class="p">.</span> <span class="nx">What</span> <span class="nx">will</span> <span class="nx">it</span><span class="o">?</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;javascript</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">hex</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">0123456789</span><span class="nx">abcdef</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">xorString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">rs</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">rs</span> <span class="o">+=</span> <span class="nx">hex</span><span class="p">[</span><span class="nx">hex</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">^</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">key</span><span class="p">[</span><span class="nx">i</span><span class="p">])];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">rs</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>
 It&rsquo;s easy, just a or operation with each MD5 result,  it&rsquo;s an MD5 result again, but not the result of password. And although others know the token is some or result. It&rsquo;s nearly impossible for them to crack it.</p>

<p>Of course, we can calculate the right token easily in the server side. Here&rsquo;s a version of C#:</p>

<pre><code class="C#">        private static string StringXor(string str, byte[] key)
        {
            for (var i = 0; i &lt; key.Length; i++)
            {
                key[i] = (byte)(Convert.ToByte(str.Substring(i * 2, 2), 16) ^ key[i]);
            }
            return BitConverter.ToString(key).Replace("-", "").ToLower();
        }
        private bool auth() {
            string cn = "";
            string ct = "";
            string token = "";

            string password = "" //select from the db
            byte[] cctoken;
                    using (var md5 = MD5.Create())
                    {
                        cctoken = md5.ComputeHash(Encoding.ASCII.GetBytes(cn + ct + password));
                    }
                    return token.Equals(StringXor(password, cctoken)) ? true : false;     
}
</code></pre>

<p>We can store the  &lsquo;password&rsquo; safely in the browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node crawler]]></title>
    <link href="http://zealot09.github.io/blog/2015/03/13/node-crawler/"/>
    <updated>2015-03-13T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2015/03/13/node-crawler</id>
    <content type="html"><![CDATA[<h1>1. Node crawler</h1>

<p>It&rsquo;s been a long time when my last blog. This time I&rsquo;m going to start an open source project called <a href="https://github.com/zealot09/node-crawler.git">node-crawler</a>. Let&rsquo;s get straight to the point, the project includes three parts:</p>

<h2>1.1 Admin Dashboard</h2>

<p>It&rsquo;s a distribute crawling service, the admin can check the crawler status, manage the crawling data, control the crawler client, manage the client config and deliver the client to different servers through the platform. Or some functions like data analyze or data statics. (This backend mainly developed with angularJs ).</p>

<h2>1.2 Backend Service</h2>

<p>Nodejs backend service which is responsible for collecting the uploaded data. Mainly include some functions like filter the data, analyze the crawling result and store into the database.</p>

<h2>1.3 Crawler Client</h2>

<p>The client is responsible for crawling the pages, execute scripts, control spider amount,. Think that the backend service send some configs, the client read it and do the crawling job the server send it.</p>

<p>Actually the client should be smart to avoid preventing by the crawling target server, It should have a lot of strategies like changing the ip, changing the agent, limit the spider speed..and so on.</p>

<p>The server send message to check the client and start the client, send config like to start the client:
<code>javascript
var clientConfig = {
    speed: 100, //100/s to access the target website
    workers: 10, //send 10 workers together crawling the website
    //some other configs
}
</code>
the client start to crawling work as the config:
<code>javascript
var crawlerConfig = {
    target: "http://www.taobao.com/p/xxxxx", //taget crawling website
    element: '', //target element
    attr: '', //the real data to grab
    //some other configs about the target web page
}
</code></p>

<p>This blog is just an introduction of the crawling system. Other blogs will introduce how to implement it! Welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 闭包]]></title>
    <link href="http://zealot09.github.io/blog/2014/10/29/javascript-bi-bao/"/>
    <updated>2014-10-29T00:48:36+08:00</updated>
    <id>http://zealot09.github.io/blog/2014/10/29/javascript-bi-bao</id>
    <content type="html"><![CDATA[<h1>Javascript闭包</h1>

<p>说到javascript的闭包，就要先说一下传统语言的一些特征，如C，Java，C#等等，<code>void Test() {int i = 0;}</code> ，当Test方法调用结束时，执行栈弹出，局部变量被回收，而js的闭包，则是提供了一种在test这个执行域(函数)消亡时，仍能够访问i的方式。</p>

<pre><code class="javascript">function greeting(name) {  
var text = 'Hello, ' + name; // local variable  
return function() { alert(text); } // 每次调用时，产生闭包，并返回内部函数对象给调用者  
}  
var sayHello=greeting("Closure");  
sayHello() // 通过闭包访问到了局部变量text  
</code></pre>

<h2>1.闭包原理</h2>

<p>闭包的原理涉及到ECMAScript语言的一些特征，下面进行详述</p>

<h3>1.1 Execution Context</h3>

<blockquote><p>控制权转移到一段可执行代码时候，就会产生一个Execution Context(简称EC)。</p></blockquote>

<p>一段可执行代码在ECMAScript里的定义可视为一个function（eval暂不提，strict mode也将其排除在外）,即函数调用的时候，就会通过压栈的方式将一个个function的ECStack压入栈中，该function return的时候就从栈中pop出来，用个简单的例子来形容:
&#8220;`javascript
(function foo(flag) {
  if (flag) {
    return;
  }
  foo(true);
})(false);</p>

<p>// 压栈情况，globalContext视环境而定，如果是浏览器，就是window
ECStack = [
  <foo> functionContext
  globalContext
];
// 压入递归方法foo
ECStack = [
  <foo> functionContext – recursively
  <foo> functionContext
  globalContext
];
//再弹出至只剩globalContext
ECStack = [
  globalContext
];
<code>``
而每个context又是由什么组成的呢,
</code>context = {
    VO = {}, //variable object，函数调用时的内部变量的集合，包括arguments，内部方法等.
    this ,  //不赘述了，简而言之就是caller(<code>a.b()</code>的a)，当然new是另一情况了
    scope chain = [] //见下文，用于变量查找
}`
附上 <a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/">VO</a>,
<a href="http://dmitrysoshnikov.com/ecmascript/chapter-3-this/">this</a>,
闭包的产生主要是Scope Chain原因，但是强烈推荐以上几篇文章，对于理解ECMAScript的机制有很大帮助，能让人顿悟很多东西。</p>

<h3>1.2 Scope</h3>

<blockquote><p>Scope上下文，即是在执行语句时候能够访问到的所有变量的集合，Javascript是允许inner function存在的，因而其Scope就是一个链表形式的存在，其最顶端就是window(浏览器环境)，然后每定义一个function，就定义一个Scope Object，保存一个outer reference，以访问上一级变量集合，形成一个层级式的链，处于最底部的function会一层一层向上找变量，这也是为什么不要使用<code>t = 'without var is global var'</code>，会大大降低执行效率。附上<a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/">ECMA-262</a></p></blockquote>

<p>而每个Scope保存的out reference是由function定义时决定的，而不是调用执行时决定的，如
<code>javascript
(function() {var right = 5;
var s = function() {
   alert(right);
}
var o = function() {
var right = 4;   
s();
}
o();
})();
</code>
alert结果是5而非4，如果把最上级的right定义注释掉，则right is not defined。所以这个时候是不是能理解闭包的原理了，虽然greeting方法已经消亡，但是返回的匿名函数的Scope保存有其上一级的outer reference，也就是text变量等的集合。</p>

<p>下一篇文章会介绍一下使用闭包的场景和相应的危害，欢迎拍砖。</p>
]]></content>
  </entry>
  
</feed>
